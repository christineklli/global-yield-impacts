
# read in crop calendar and season data ------------------------------------------------------------

# gridded growing season length and growing month indicators for combined Sacks and MIRCA data 
crop_season <- readRDS(here("processed", "crop_season.RData")) #dim(crop_season) # 2013110      18
# 15 rasterbricks, one for each crop, showing growing season binary variables for each month
raster_extended_crop_season <- readRDS(here("processed", "raster_extended_crop_season.RData"))
# gridded crop calendar information - planting and harvesting month
crop_calendar <- readRDS(here("processed", "crop_calendar.RData"))

# manipulate crop calendar and season data -------------------

crop_season_extended <- lapply(1:15, function(i){
  matrix <- raster_extended_crop_season[[i]][] # turn raster of full 259200 grid cells for 15 crop varieties into matrix
  matrix[,1] <- unique(crop_season$crop)[i] # crop name
  matrix <- as.data.frame(matrix)
  matrix$lon <- crop_calendar$lon[1:259200] # full list replicated x 7 crops
  matrix$lat <- crop_calendar$lat[1:259200]
  matrix
})

crop_season_extended <- rbindlist(crop_season_extended)

# crop_season_extended is then the extended dataframe of crop_season and should have 15 x 259200 rows, unlike crop_season (recall MIRCA crops had incomplete grid cells where no calendar values were available)
dim(crop_season_extended) # 3888000 18

cols <- c("n_growing_months", "jan_growing", "feb_growing", "mar_growing", "apr_growing", "may_growing", "jun_growing", "jul_growing", "aug_growing", "sept_growing", "oct_growing", "nov_growing", "dec_growing")
crop_season_extended_numeric <- crop_season_extended # note copy, remove from environment
# some cols are character when they should be numeric
crop_season_extended_numeric[,(cols):=lapply(.SD, as.numeric), .SDcols=cols]

rm(crop_season_extended)

# create tmp_x_wide x 11 times - and calculate annual average temperatures one at a time, remove when done for memory management
# for each dataframe, mutate new variable with major crop variety level, group_by major crop level and take average baseline temperatures over the sub-crop-variety temperatures
# however, need lon lat points in crop_season_extended

# only keep 9 crops in crop_season_extended_numeric

unique(crop_season_extended_numeric$crop)

crop_season_extended_subset <- crop_season_extended_numeric %>% 
  filter(crop %in% c("Rice", "Rice (Rainfed)", "Rice (Irrigated)", "Wheat", "Wheat.Winter", "Wheat (Rainfed)", "Wheat (Irrigated)", "Maize", "Soybean"))


# read in CRU temp data -------------------------------------------------------

# rewrite this code so that I can generate bs gs temp and precip in the same code run

# read in temp data
tmps_2011_2020 <- nc_open(here("data", "CRU data", "cru_ts4.05.2011.2020.tmp.dat.nc"))

# store values from variables and attributes
nc_tmp_2011_2020 <- ncvar_get(tmps_2011_2020, attributes(tmps_2011_2020$var)$names[1])
nc_tmps_lon_2011_2020 <- ncvar_get(tmps_2011_2020,attributes(tmps_2011_2020$dim)$names[1])
nc_tmps_lat_2011_2020 <- ncvar_get(tmps_2011_2020, attributes(tmps_2011_2020$dim)$names[2])
nc_tmps_time_2011_2020 <- ncvar_get(tmps_2011_2020, attributes(tmps_2011_2020$dim)$names[3]) # 120 months
nc_tmps_atts_2011_2020 <- ncatt_get(tmps_2011_2020, 0)

# set dimension names and values to corresponding lon and lat values
dimnames(nc_tmp_2011_2020) <- list(lon = nc_tmps_lon_2011_2020, lat = nc_tmps_lat_2011_2020, time = nc_tmps_time_2011_2020)


tmp_2011_2020_df <- reshape2::melt(nc_tmp_2011_2020, value.name = "tmp") 
tmp_2011_2020_df$date <- as.Date(tmp_2011_2020_df$time, origin = "1900-1-1")
tmp_2011_2020_df <- tmp_2011_2020_df %>% dplyr::select(!time)


# read in CRU precip data -----------------------------------------------------



# calculate baseline average growing season temp and precip averaged over 2015-2020 from CRU data ---------------------------

generate_baseline_tmp_2011_2020_annual <- function(YEAR.START, YEAR.END) {
  
  TMP_YEAR <- tmp_2011_2020_df %>% # CHANGE THIS
    dplyr::filter(date >= as.Date(YEAR.START) & date <= as.Date(YEAR.END)) # this changes dynamically
  
  # need to reshape wide by month
  TMP_YEAR_WIDE <- tidyr::spread(TMP_YEAR, date, tmp)
  except <- c("lon", "lat")
  colnames(TMP_YEAR_WIDE) <- paste("tmp", colnames(TMP_YEAR_WIDE), sep = "_")
  TMP_YEAR_WIDE <- TMP_YEAR_WIDE %>% dplyr::rename(lon = tmp_lon, lat = tmp_lat)
  
  # merge by lon lat
  CROP_TMP_YEAR <- merge(crop_season_extended_subset, TMP_YEAR_WIDE, 
                         by = c("lon", "lat"),
                         all.x = T)
  
  # convert tmp vars to months (rename colnames) (jan_tmp, ... , dec_tmp)
  
  CROP_TMP_YEAR <- CROP_TMP_YEAR %>% # make sure column indices are correctly ordered first
    rename(jan_tmp = 19,
           feb_tmp = 20,
           mar_tmp = 21,
           apr_tmp = 22,
           may_tmp = 23,
           jun_tmp = 24,
           jul_tmp = 25,
           aug_tmp = 26,
           sept_tmp = 27,
           oct_tmp = 28,
           nov_tmp = 29,
           dec_tmp = 30)
  
  # created weighted average
  CROP_TMP_YEAR <- CROP_TMP_YEAR %>% 
    mutate(avg_growing_tmp = (jan_tmp*jan_growing + 
                                feb_tmp*feb_growing +
                                mar_tmp*mar_growing +
                                apr_tmp*apr_growing +
                                may_tmp*may_growing +
                                jun_tmp*jun_growing +
                                jul_tmp*jul_growing +
                                aug_tmp*aug_growing +
                                sept_tmp*sept_growing +
                                oct_tmp*oct_growing +
                                nov_tmp*nov_growing +
                                dec_tmp*dec_growing)/n_growing_months)
  
  AVG_TMP_YEAR <- CROP_TMP_YEAR %>% 
    dplyr::select(lon, lat, crop, avg_growing_tmp) %>% 
    mutate(year = year(YEAR.START)) %>%  
    
    # now average over sub-crop variety baseline temperatures
    # for each dataframe, mutate new variable with major crop variety level, group_by major crop level and take average baseline temperatures over the sub-crop-variety temperatures
    mutate(crop_pooled = case_when(crop %in% c("Wheat", "Wheat.Winter", "Wheat (Rainfed)", "Wheat (Irrigated)") ~ "Wheat",
                                   crop %in% c("Rice", "Rice (Irrigated)", "Rice (Rainfed)") ~ "Rice",
                                   crop == "Maize" ~ "Maize",
                                   crop == "Soybean" ~ "Soybean")) %>%
    group_by(lon, lat, crop_pooled, year) %>% 
    summarise(mean_avg_growing_tmp = mean(avg_growing_tmp, na.rm = TRUE))
  
  
  
}

# generate_baseline_tmp_1995_2005_annual(YEAR.START = "2000-01-16", YEAR.END = "2000-12-16")

df_2015_2020 = data.frame(YEAR.START = c("2015-01-16", "2016-01-16", "2017-01-16", "2018-01-16", "2019-01-16", "2020-01-16"), 
                          YEAR.END = c("2015-12-16", "2016-12-16", "2017-12-16", "2018-12-16", "2019-12-16", "2020-12-16"))

# do.call(function(x,z,...) generate_baseline_tmp_1995_2005_annual(x,z), df)

avg_baseline_tmps_2015_2020 <- apply(df_2015_2020[,c("YEAR.START", "YEAR.END")], 1, function(x) generate_baseline_tmp_2011_2020_annual(x[1], x[2]))

lapply(1:6, function(i){
  
  avg_baseline_tmps_2015_2020[[i]] %>% 
    saveRDS(here("processed", paste0("avg_baseline_tmps_2015_2020_", i, ".Rdata")))
})

# read in

avg_baseline_tmps_2015_2020 <- lapply(1:6, function(i) {
  
  readRDS(here("processed", paste0("avg_baseline_tmps_2015_2020_", i, ".Rdata")))
  
})


# STOP HERE before going any further; instead of shaping wide we should keep long
# and group split dataframes into lists based on crop 
# so that we can apply predictions by model specification element in parallel


# test  -------------------------------------------------------------------

# try to rewrite apply function using another element i and make that element tmp data
# see if the resulting output is the same as avg_baseline_tmps_2015_2020 - use a function to check
# if it works, add precip data to element i
# then cbind temp and precip data into the same frame for each crop and year
# then rbind years into one dataframe following steps below


cru_vars <- c("tmp_2011_2020_df", "pre_2011_2020_df") # add # , pre_2011_2020_df once this dataset exists
var <- c("tmp", "pre")

calc_bs_var <- function(YEAR.START, YEAR.END, i) { # note that i relates to tmp, pre data
  
  YEAR <- eval(rlang::parse_expr(cru_vars[[i]])) %>% 
    dplyr::filter(date >= as.Date(YEAR.START) & date <= as.Date(YEAR.END)) # this changes dynamically
  
  # need to reshape wide by month
  YEAR_WIDE <- tidyr::spread(YEAR, date, eval(rlang::parse_expr(var[[i]])))
  colnames(YEAR_WIDE) <- paste(var[[i]], colnames(YEAR_WIDE), sep = "_")
  YEAR_WIDE <- YEAR_WIDE %>% dplyr::rename(lon = 1, lat = 2)
  
  # merge by lon lat
  CROP_YEAR <- merge(crop_season_extended_subset, YEAR_WIDE, 
                         by = c("lon", "lat"),
                         all.x = T)
  
  # convert climate vars to months (rename colnames) (jan_var, ... , dec_var)
  
  CROP_YEAR <- CROP_YEAR %>% 
    rename(jan_var = 19,
           feb_var = 20,
           mar_var = 21,
           apr_var = 22,
           may_var = 23,
           jun_var = 24,
           jul_var = 25,
           aug_var = 26,
           sept_var = 27,
           oct_var = 28,
           nov_var = 29,
           dec_var = 30)
  
  # created weighted average
  CROP_YEAR <- CROP_YEAR %>% 
    mutate(avg_growing_var = (jan_var*jan_growing + 
                                feb_var*feb_growing +
                                mar_var*mar_growing +
                                apr_var*apr_growing +
                                may_var*may_growing +
                                jun_var*jun_growing +
                                jul_var*jul_growing +
                                aug_var*aug_growing +
                                sept_var*sept_growing +
                                oct_var*oct_growing +
                                nov_var*nov_growing +
                                dec_var*dec_growing)/n_growing_months)
  
  AVG_YEAR <- CROP_YEAR %>% 
    dplyr::select(lon, lat, crop, avg_growing_var) %>% 
    mutate(year = year(YEAR.START)) %>%  
    
    # now average over sub-crop variety baseline temperatures
    # for each dataframe, mutate new variable with major crop variety level, group_by major crop level and take average baseline temperatures over the sub-crop-variety temperatures
    mutate(crop_pooled = case_when(crop %in% c("Wheat", "Wheat.Winter", "Wheat (Rainfed)", "Wheat (Irrigated)") ~ "Wheat",
                                   crop %in% c("Rice", "Rice (Irrigated)", "Rice (Rainfed)") ~ "Rice",
                                   crop == "Maize" ~ "Maize",
                                   crop == "Soybean" ~ "Soybean")) %>%
    group_by(lon, lat, crop_pooled, year) %>% 
    summarise(bs_gs_var = mean(avg_growing_var, na.rm = TRUE))

}

# calc_bs_var(YEAR.START = "2000-01-16", YEAR.END = "2000-12-16", i = 1)

bs_years = data.frame(YEAR.START = c("2015-01-16", "2016-01-16", "2017-01-16", "2018-01-16", "2019-01-16", "2020-01-16"), 
                          YEAR.END = c("2015-12-16", "2016-12-16", "2017-12-16", "2018-12-16", "2019-12-16", "2020-12-16"))

# calculate baseline growing season temperature averaged over 2015-2020

bs_years_tmp <- apply(bs_years[,c("YEAR.START", "YEAR.END")], 1, function(x) calc_bs_var(x[1], x[2], 1))

# calculate baseline growing season precipitation averaged over 2015-2020

bs_years_pre <- apply(bs_years[,c("YEAR.START", "YEAR.END")], 1, function(x) calc_bs_var(x[1], x[2], 2))

# cbind precip into the same dataframe as temp for each of 2015-2020 (6) tables in the list

# save this so that if I need to default to a single year as baseline year e.g. 2015, can do that

# then do group_by means for averaging over 2015-2020

# save this

# group-split into list by crop_pooled


# check this gives same results as avg_baseline_tmps_2015_2020
setequal(avg_baseline_tmps_2015_2020, bs_var_2015_2020)


# rasterise bs gs temp -----------------------------------------

# calculate average baseline temperature over 2015-2020 tables in list and rasterise averaged result

bs_tmp_2015_2020 <- cbind(
  bs_years_tmp[[1]][5],
  bs_years_tmp[[2]][5],
  bs_years_tmp[[3]][5],
  bs_years_tmp[[4]][5],
  bs_years_tmp[[5]][5],
  bs_years_tmp[[6]][5]) %>% rowMeans() %>% 
  cbind(lon = bs_years_tmp[[1]][[1]], 
        lat = bs_years_tmp[[1]][[2]],
        crop_pooled = bs_years_tmp[[1]][[3]]) 

bs_tmp_2015_2020 <- as.data.frame(bs_tmp_2015_2020) %>% 
  rename(bs_years_tmp = 1) %>% 
  mutate(bs_years_tmp = as.numeric(bs_years_tmp))


rm(avg_baseline_tmp_2015_2020) # 705Mb!

# pivot wide by crop
bs_tmp_2015_2020_wide <- bs_tmp_2015_2020 %>% 
  pivot_wider(names_from = crop_pooled, values_from = bs_years_tmp)

bs_tmp_2015_2020_wide %>% readr::write_csv(here("processed", "bs_tmp_2015_2020_wide.csv"))

saveRDS(bs_tmp_2015_2020_wide, here("processed", "bs_tmp_2015_2020_wide.RData"))

# rasterise
bs_tmp_2015_2020_wide_raster <- rasterFromXYZ(bs_tmp_2015_2020_wide)

# save mean_baseline_tmps_2015_2020_grid_wide as a list with four (crop) elements
# we will want to join this to baseline precipitation by crop and lon/lat once the same calculations are repeated for bs gs precip in 2015-2020

# plot
rasterVis::levelplot(bs_tmp_2015_2020_wide_raster, main = "Average baseline growing-season temperature for 2015 to 2020")

bs_tmp_2015_2020_matrix <- bs_tmp_2015_2020_wide_raster[]

bs_tmp_2015_2020_df <- data.frame(Maize = bs_tmp_2015_2020_matrix[,1],
                                             Rice = bs_tmp_2015_2020_matrix[,2],
                                             Soybean = bs_tmp_2015_2020_matrix[,3],
                                             Wheat = bs_tmp_2015_2020_matrix[,4])

bs_tmp_2015_2020_df %>% readr::write_csv(here("processed", "bs_tmp_2015_2020_df.csv"))

saveRDS(bs_tmp_2015_2020_df, here("processed", "bs_tmp_2015_2020_df.RData"))


